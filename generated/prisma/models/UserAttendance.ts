
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `UserAttendance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserAttendance
 * 
 */
export type UserAttendanceModel = runtime.Types.Result.DefaultSelection<Prisma.$UserAttendancePayload>

export type AggregateUserAttendance = {
  _count: UserAttendanceCountAggregateOutputType | null
  _avg: UserAttendanceAvgAggregateOutputType | null
  _sum: UserAttendanceSumAggregateOutputType | null
  _min: UserAttendanceMinAggregateOutputType | null
  _max: UserAttendanceMaxAggregateOutputType | null
}

export type UserAttendanceAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type UserAttendanceSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type UserAttendanceMinAggregateOutputType = {
  id: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserAttendanceMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserAttendanceCountAggregateOutputType = {
  id: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserAttendanceAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type UserAttendanceSumAggregateInputType = {
  id?: true
  userId?: true
}

export type UserAttendanceMinAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type UserAttendanceMaxAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type UserAttendanceCountAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserAttendanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserAttendance to aggregate.
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAttendances to fetch.
   */
  orderBy?: Prisma.UserAttendanceOrderByWithRelationInput | Prisma.UserAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAttendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserAttendances
  **/
  _count?: true | UserAttendanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserAttendanceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserAttendanceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserAttendanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserAttendanceMaxAggregateInputType
}

export type GetUserAttendanceAggregateType<T extends UserAttendanceAggregateArgs> = {
      [P in keyof T & keyof AggregateUserAttendance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserAttendance[P]>
    : Prisma.GetScalarType<T[P], AggregateUserAttendance[P]>
}




export type UserAttendanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserAttendanceWhereInput
  orderBy?: Prisma.UserAttendanceOrderByWithAggregationInput | Prisma.UserAttendanceOrderByWithAggregationInput[]
  by: Prisma.UserAttendanceScalarFieldEnum[] | Prisma.UserAttendanceScalarFieldEnum
  having?: Prisma.UserAttendanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserAttendanceCountAggregateInputType | true
  _avg?: UserAttendanceAvgAggregateInputType
  _sum?: UserAttendanceSumAggregateInputType
  _min?: UserAttendanceMinAggregateInputType
  _max?: UserAttendanceMaxAggregateInputType
}

export type UserAttendanceGroupByOutputType = {
  id: number
  userId: number
  createdAt: Date
  updatedAt: Date
  _count: UserAttendanceCountAggregateOutputType | null
  _avg: UserAttendanceAvgAggregateOutputType | null
  _sum: UserAttendanceSumAggregateOutputType | null
  _min: UserAttendanceMinAggregateOutputType | null
  _max: UserAttendanceMaxAggregateOutputType | null
}

type GetUserAttendanceGroupByPayload<T extends UserAttendanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserAttendanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserAttendanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserAttendanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserAttendanceGroupByOutputType[P]>
      }
    >
  > 



export type UserAttendanceWhereInput = {
  AND?: Prisma.UserAttendanceWhereInput | Prisma.UserAttendanceWhereInput[]
  OR?: Prisma.UserAttendanceWhereInput[]
  NOT?: Prisma.UserAttendanceWhereInput | Prisma.UserAttendanceWhereInput[]
  id?: Prisma.IntFilter<"UserAttendance"> | number
  userId?: Prisma.IntFilter<"UserAttendance"> | number
  createdAt?: Prisma.DateTimeFilter<"UserAttendance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserAttendance"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserAttendanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserAttendanceWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.UserAttendanceWhereInput | Prisma.UserAttendanceWhereInput[]
  OR?: Prisma.UserAttendanceWhereInput[]
  NOT?: Prisma.UserAttendanceWhereInput | Prisma.UserAttendanceWhereInput[]
  userId?: Prisma.IntFilter<"UserAttendance"> | number
  createdAt?: Prisma.DateTimeFilter<"UserAttendance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserAttendance"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type UserAttendanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserAttendanceCountOrderByAggregateInput
  _avg?: Prisma.UserAttendanceAvgOrderByAggregateInput
  _max?: Prisma.UserAttendanceMaxOrderByAggregateInput
  _min?: Prisma.UserAttendanceMinOrderByAggregateInput
  _sum?: Prisma.UserAttendanceSumOrderByAggregateInput
}

export type UserAttendanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserAttendanceScalarWhereWithAggregatesInput | Prisma.UserAttendanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserAttendanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserAttendanceScalarWhereWithAggregatesInput | Prisma.UserAttendanceScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserAttendance"> | number
  userId?: Prisma.IntWithAggregatesFilter<"UserAttendance"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserAttendance"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserAttendance"> | Date | string
}

export type UserAttendanceCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutUserAttendancesInput
}

export type UserAttendanceUncheckedCreateInput = {
  id?: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAttendanceUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutUserAttendancesNestedInput
}

export type UserAttendanceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAttendanceCreateManyInput = {
  id?: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAttendanceUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAttendanceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAttendanceListRelationFilter = {
  every?: Prisma.UserAttendanceWhereInput
  some?: Prisma.UserAttendanceWhereInput
  none?: Prisma.UserAttendanceWhereInput
}

export type UserAttendanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserAttendanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAttendanceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserAttendanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAttendanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAttendanceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserAttendanceCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserAttendanceCreateWithoutUserInput, Prisma.UserAttendanceUncheckedCreateWithoutUserInput> | Prisma.UserAttendanceCreateWithoutUserInput[] | Prisma.UserAttendanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAttendanceCreateOrConnectWithoutUserInput | Prisma.UserAttendanceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserAttendanceCreateManyUserInputEnvelope
  connect?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
}

export type UserAttendanceUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserAttendanceCreateWithoutUserInput, Prisma.UserAttendanceUncheckedCreateWithoutUserInput> | Prisma.UserAttendanceCreateWithoutUserInput[] | Prisma.UserAttendanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAttendanceCreateOrConnectWithoutUserInput | Prisma.UserAttendanceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserAttendanceCreateManyUserInputEnvelope
  connect?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
}

export type UserAttendanceUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserAttendanceCreateWithoutUserInput, Prisma.UserAttendanceUncheckedCreateWithoutUserInput> | Prisma.UserAttendanceCreateWithoutUserInput[] | Prisma.UserAttendanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAttendanceCreateOrConnectWithoutUserInput | Prisma.UserAttendanceCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserAttendanceUpsertWithWhereUniqueWithoutUserInput | Prisma.UserAttendanceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserAttendanceCreateManyUserInputEnvelope
  set?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  disconnect?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  delete?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  connect?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  update?: Prisma.UserAttendanceUpdateWithWhereUniqueWithoutUserInput | Prisma.UserAttendanceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserAttendanceUpdateManyWithWhereWithoutUserInput | Prisma.UserAttendanceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserAttendanceScalarWhereInput | Prisma.UserAttendanceScalarWhereInput[]
}

export type UserAttendanceUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserAttendanceCreateWithoutUserInput, Prisma.UserAttendanceUncheckedCreateWithoutUserInput> | Prisma.UserAttendanceCreateWithoutUserInput[] | Prisma.UserAttendanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAttendanceCreateOrConnectWithoutUserInput | Prisma.UserAttendanceCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserAttendanceUpsertWithWhereUniqueWithoutUserInput | Prisma.UserAttendanceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserAttendanceCreateManyUserInputEnvelope
  set?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  disconnect?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  delete?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  connect?: Prisma.UserAttendanceWhereUniqueInput | Prisma.UserAttendanceWhereUniqueInput[]
  update?: Prisma.UserAttendanceUpdateWithWhereUniqueWithoutUserInput | Prisma.UserAttendanceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserAttendanceUpdateManyWithWhereWithoutUserInput | Prisma.UserAttendanceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserAttendanceScalarWhereInput | Prisma.UserAttendanceScalarWhereInput[]
}

export type UserAttendanceCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAttendanceUncheckedCreateWithoutUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAttendanceCreateOrConnectWithoutUserInput = {
  where: Prisma.UserAttendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.UserAttendanceCreateWithoutUserInput, Prisma.UserAttendanceUncheckedCreateWithoutUserInput>
}

export type UserAttendanceCreateManyUserInputEnvelope = {
  data: Prisma.UserAttendanceCreateManyUserInput | Prisma.UserAttendanceCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserAttendanceUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserAttendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.UserAttendanceUpdateWithoutUserInput, Prisma.UserAttendanceUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserAttendanceCreateWithoutUserInput, Prisma.UserAttendanceUncheckedCreateWithoutUserInput>
}

export type UserAttendanceUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserAttendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.UserAttendanceUpdateWithoutUserInput, Prisma.UserAttendanceUncheckedUpdateWithoutUserInput>
}

export type UserAttendanceUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserAttendanceScalarWhereInput
  data: Prisma.XOR<Prisma.UserAttendanceUpdateManyMutationInput, Prisma.UserAttendanceUncheckedUpdateManyWithoutUserInput>
}

export type UserAttendanceScalarWhereInput = {
  AND?: Prisma.UserAttendanceScalarWhereInput | Prisma.UserAttendanceScalarWhereInput[]
  OR?: Prisma.UserAttendanceScalarWhereInput[]
  NOT?: Prisma.UserAttendanceScalarWhereInput | Prisma.UserAttendanceScalarWhereInput[]
  id?: Prisma.IntFilter<"UserAttendance"> | number
  userId?: Prisma.IntFilter<"UserAttendance"> | number
  createdAt?: Prisma.DateTimeFilter<"UserAttendance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserAttendance"> | Date | string
}

export type UserAttendanceCreateManyUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAttendanceUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAttendanceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAttendanceUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserAttendanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAttendance"]>

export type UserAttendanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAttendance"]>

export type UserAttendanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAttendance"]>

export type UserAttendanceSelectScalar = {
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserAttendanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["userAttendance"]>
export type UserAttendanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserAttendanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserAttendanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserAttendancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserAttendance"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userAttendance"]>
  composites: {}
}

export type UserAttendanceGetPayload<S extends boolean | null | undefined | UserAttendanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload, S>

export type UserAttendanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserAttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserAttendanceCountAggregateInputType | true
  }

export interface UserAttendanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAttendance'], meta: { name: 'UserAttendance' } }
  /**
   * Find zero or one UserAttendance that matches the filter.
   * @param {UserAttendanceFindUniqueArgs} args - Arguments to find a UserAttendance
   * @example
   * // Get one UserAttendance
   * const userAttendance = await prisma.userAttendance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserAttendanceFindUniqueArgs>(args: Prisma.SelectSubset<T, UserAttendanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserAttendance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserAttendanceFindUniqueOrThrowArgs} args - Arguments to find a UserAttendance
   * @example
   * // Get one UserAttendance
   * const userAttendance = await prisma.userAttendance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserAttendanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserAttendance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceFindFirstArgs} args - Arguments to find a UserAttendance
   * @example
   * // Get one UserAttendance
   * const userAttendance = await prisma.userAttendance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserAttendanceFindFirstArgs>(args?: Prisma.SelectSubset<T, UserAttendanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserAttendance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceFindFirstOrThrowArgs} args - Arguments to find a UserAttendance
   * @example
   * // Get one UserAttendance
   * const userAttendance = await prisma.userAttendance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserAttendanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserAttendances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserAttendances
   * const userAttendances = await prisma.userAttendance.findMany()
   * 
   * // Get first 10 UserAttendances
   * const userAttendances = await prisma.userAttendance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userAttendanceWithIdOnly = await prisma.userAttendance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserAttendanceFindManyArgs>(args?: Prisma.SelectSubset<T, UserAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserAttendance.
   * @param {UserAttendanceCreateArgs} args - Arguments to create a UserAttendance.
   * @example
   * // Create one UserAttendance
   * const UserAttendance = await prisma.userAttendance.create({
   *   data: {
   *     // ... data to create a UserAttendance
   *   }
   * })
   * 
   */
  create<T extends UserAttendanceCreateArgs>(args: Prisma.SelectSubset<T, UserAttendanceCreateArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserAttendances.
   * @param {UserAttendanceCreateManyArgs} args - Arguments to create many UserAttendances.
   * @example
   * // Create many UserAttendances
   * const userAttendance = await prisma.userAttendance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserAttendanceCreateManyArgs>(args?: Prisma.SelectSubset<T, UserAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserAttendances and returns the data saved in the database.
   * @param {UserAttendanceCreateManyAndReturnArgs} args - Arguments to create many UserAttendances.
   * @example
   * // Create many UserAttendances
   * const userAttendance = await prisma.userAttendance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserAttendances and only return the `id`
   * const userAttendanceWithIdOnly = await prisma.userAttendance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserAttendanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserAttendance.
   * @param {UserAttendanceDeleteArgs} args - Arguments to delete one UserAttendance.
   * @example
   * // Delete one UserAttendance
   * const UserAttendance = await prisma.userAttendance.delete({
   *   where: {
   *     // ... filter to delete one UserAttendance
   *   }
   * })
   * 
   */
  delete<T extends UserAttendanceDeleteArgs>(args: Prisma.SelectSubset<T, UserAttendanceDeleteArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserAttendance.
   * @param {UserAttendanceUpdateArgs} args - Arguments to update one UserAttendance.
   * @example
   * // Update one UserAttendance
   * const userAttendance = await prisma.userAttendance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserAttendanceUpdateArgs>(args: Prisma.SelectSubset<T, UserAttendanceUpdateArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserAttendances.
   * @param {UserAttendanceDeleteManyArgs} args - Arguments to filter UserAttendances to delete.
   * @example
   * // Delete a few UserAttendances
   * const { count } = await prisma.userAttendance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserAttendanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserAttendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserAttendances
   * const userAttendance = await prisma.userAttendance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserAttendanceUpdateManyArgs>(args: Prisma.SelectSubset<T, UserAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserAttendances and returns the data updated in the database.
   * @param {UserAttendanceUpdateManyAndReturnArgs} args - Arguments to update many UserAttendances.
   * @example
   * // Update many UserAttendances
   * const userAttendance = await prisma.userAttendance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserAttendances and only return the `id`
   * const userAttendanceWithIdOnly = await prisma.userAttendance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserAttendanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserAttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserAttendance.
   * @param {UserAttendanceUpsertArgs} args - Arguments to update or create a UserAttendance.
   * @example
   * // Update or create a UserAttendance
   * const userAttendance = await prisma.userAttendance.upsert({
   *   create: {
   *     // ... data to create a UserAttendance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserAttendance we want to update
   *   }
   * })
   */
  upsert<T extends UserAttendanceUpsertArgs>(args: Prisma.SelectSubset<T, UserAttendanceUpsertArgs<ExtArgs>>): Prisma.Prisma__UserAttendanceClient<runtime.Types.Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserAttendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceCountArgs} args - Arguments to filter UserAttendances to count.
   * @example
   * // Count the number of UserAttendances
   * const count = await prisma.userAttendance.count({
   *   where: {
   *     // ... the filter for the UserAttendances we want to count
   *   }
   * })
  **/
  count<T extends UserAttendanceCountArgs>(
    args?: Prisma.Subset<T, UserAttendanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserAttendanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserAttendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAttendanceAggregateArgs>(args: Prisma.Subset<T, UserAttendanceAggregateArgs>): Prisma.PrismaPromise<GetUserAttendanceAggregateType<T>>

  /**
   * Group by UserAttendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAttendanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserAttendanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserAttendanceGroupByArgs['orderBy'] }
      : { orderBy?: UserAttendanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserAttendance model
 */
readonly fields: UserAttendanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserAttendance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserAttendanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserAttendance model
 */
export interface UserAttendanceFieldRefs {
  readonly id: Prisma.FieldRef<"UserAttendance", 'Int'>
  readonly userId: Prisma.FieldRef<"UserAttendance", 'Int'>
  readonly createdAt: Prisma.FieldRef<"UserAttendance", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserAttendance", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserAttendance findUnique
 */
export type UserAttendanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which UserAttendance to fetch.
   */
  where: Prisma.UserAttendanceWhereUniqueInput
}

/**
 * UserAttendance findUniqueOrThrow
 */
export type UserAttendanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which UserAttendance to fetch.
   */
  where: Prisma.UserAttendanceWhereUniqueInput
}

/**
 * UserAttendance findFirst
 */
export type UserAttendanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which UserAttendance to fetch.
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAttendances to fetch.
   */
  orderBy?: Prisma.UserAttendanceOrderByWithRelationInput | Prisma.UserAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserAttendances.
   */
  cursor?: Prisma.UserAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAttendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserAttendances.
   */
  distinct?: Prisma.UserAttendanceScalarFieldEnum | Prisma.UserAttendanceScalarFieldEnum[]
}

/**
 * UserAttendance findFirstOrThrow
 */
export type UserAttendanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which UserAttendance to fetch.
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAttendances to fetch.
   */
  orderBy?: Prisma.UserAttendanceOrderByWithRelationInput | Prisma.UserAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserAttendances.
   */
  cursor?: Prisma.UserAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAttendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserAttendances.
   */
  distinct?: Prisma.UserAttendanceScalarFieldEnum | Prisma.UserAttendanceScalarFieldEnum[]
}

/**
 * UserAttendance findMany
 */
export type UserAttendanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which UserAttendances to fetch.
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAttendances to fetch.
   */
  orderBy?: Prisma.UserAttendanceOrderByWithRelationInput | Prisma.UserAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserAttendances.
   */
  cursor?: Prisma.UserAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAttendances.
   */
  skip?: number
  distinct?: Prisma.UserAttendanceScalarFieldEnum | Prisma.UserAttendanceScalarFieldEnum[]
}

/**
 * UserAttendance create
 */
export type UserAttendanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * The data needed to create a UserAttendance.
   */
  data: Prisma.XOR<Prisma.UserAttendanceCreateInput, Prisma.UserAttendanceUncheckedCreateInput>
}

/**
 * UserAttendance createMany
 */
export type UserAttendanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserAttendances.
   */
  data: Prisma.UserAttendanceCreateManyInput | Prisma.UserAttendanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserAttendance createManyAndReturn
 */
export type UserAttendanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * The data used to create many UserAttendances.
   */
  data: Prisma.UserAttendanceCreateManyInput | Prisma.UserAttendanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserAttendance update
 */
export type UserAttendanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * The data needed to update a UserAttendance.
   */
  data: Prisma.XOR<Prisma.UserAttendanceUpdateInput, Prisma.UserAttendanceUncheckedUpdateInput>
  /**
   * Choose, which UserAttendance to update.
   */
  where: Prisma.UserAttendanceWhereUniqueInput
}

/**
 * UserAttendance updateMany
 */
export type UserAttendanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserAttendances.
   */
  data: Prisma.XOR<Prisma.UserAttendanceUpdateManyMutationInput, Prisma.UserAttendanceUncheckedUpdateManyInput>
  /**
   * Filter which UserAttendances to update
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * Limit how many UserAttendances to update.
   */
  limit?: number
}

/**
 * UserAttendance updateManyAndReturn
 */
export type UserAttendanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * The data used to update UserAttendances.
   */
  data: Prisma.XOR<Prisma.UserAttendanceUpdateManyMutationInput, Prisma.UserAttendanceUncheckedUpdateManyInput>
  /**
   * Filter which UserAttendances to update
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * Limit how many UserAttendances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserAttendance upsert
 */
export type UserAttendanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * The filter to search for the UserAttendance to update in case it exists.
   */
  where: Prisma.UserAttendanceWhereUniqueInput
  /**
   * In case the UserAttendance found by the `where` argument doesn't exist, create a new UserAttendance with this data.
   */
  create: Prisma.XOR<Prisma.UserAttendanceCreateInput, Prisma.UserAttendanceUncheckedCreateInput>
  /**
   * In case the UserAttendance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserAttendanceUpdateInput, Prisma.UserAttendanceUncheckedUpdateInput>
}

/**
 * UserAttendance delete
 */
export type UserAttendanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
  /**
   * Filter which UserAttendance to delete.
   */
  where: Prisma.UserAttendanceWhereUniqueInput
}

/**
 * UserAttendance deleteMany
 */
export type UserAttendanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserAttendances to delete
   */
  where?: Prisma.UserAttendanceWhereInput
  /**
   * Limit how many UserAttendances to delete.
   */
  limit?: number
}

/**
 * UserAttendance without action
 */
export type UserAttendanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAttendance
   */
  select?: Prisma.UserAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAttendance
   */
  omit?: Prisma.UserAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAttendanceInclude<ExtArgs> | null
}
